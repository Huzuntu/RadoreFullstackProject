{"ast":null,"code":"// src/app/slices/product.js\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Swal from \"sweetalert2\";\nconst initialState = {\n  products: [],\n  carts: [],\n  favorites: [],\n  single: null,\n  status: 'idle',\n  error: null\n}; // Create an asynchronous thunk for fetching products\n\nexport const fetchProducts = createAsyncThunk('products/fetchProducts', async () => {\n  const response = await fetch('http://localhost:5080/api/products');\n\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n\n  return response.json();\n});\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    AddToCart: (state, action) => {\n      let {\n        id\n      } = action.payload;\n      let sepeteEklenecekUrun = state.carts.find(item => item.id === parseInt(id));\n\n      if (sepeteEklenecekUrun === undefined) {\n        let item = state.products.find(item => item.id === parseInt(id));\n        item.quantity = 1;\n        state.carts.push(item);\n        Swal.fire({\n          title: 'Başarılı',\n          text: \"Ürün sepete eklendi!\",\n          icon: 'success',\n          showConfirmButton: false,\n          timer: 2000\n        });\n      }\n    },\n    getProductById: (state, action) => {\n      let {\n        id\n      } = action.payload;\n      let urunDetay = state.products.find(item => item.id === parseInt(id));\n      state.single = urunDetay;\n    },\n    updateCart: (state, action) => {\n      let {\n        val,\n        id\n      } = action.payload;\n      state.carts.forEach(item => {\n        if (item.id === parseInt(id)) {\n          item.quantity = val;\n        }\n      });\n    },\n    removeCart: (state, action) => {\n      let {\n        id\n      } = action.payload;\n      let sepetinOnSonHali = state.carts.filter(item => item.id !== parseInt(id));\n      state.carts = sepetinOnSonHali;\n    },\n    clearCart: state => {\n      state.carts = [];\n    },\n    addToFavorites: (state, action) => {\n      let {\n        id\n      } = action.payload;\n      let item = state.favorites.find(item => item.id === parseInt(id));\n\n      if (item === undefined) {\n        let urunFavori = state.products.find(item => item.id === parseInt(id));\n        urunFavori.quantity = 1;\n        state.favorites.push(urunFavori);\n        Swal.fire({\n          title: 'Başarılı',\n          text: 'İlgili ürün favorilere eklenmiştir',\n          icon: 'success'\n        });\n      } else {\n        Swal.fire('Başarsız', 'İlgili ürün favorilere eklenemedi', 'warning');\n      }\n    },\n    removeToFav: (state, action) => {\n      let {\n        id\n      } = action.payload;\n      let favorilerinOnSonHali = state.favorites.filter(item => item.id !== parseInt(id));\n      state.favorites = favorilerinOnSonHali;\n    },\n    clearFav: state => {\n      state.favorites = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProducts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchProducts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.products = action.payload;\n    }).addCase(fetchProducts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  AddToCart,\n  getProductById,\n  updateCart,\n  removeCart,\n  clearCart,\n  addToFavorites,\n  removeToFav,\n  clearFav\n} = productsSlice.actions;\nexport default productsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","Swal","initialState","products","carts","favorites","single","status","error","fetchProducts","response","fetch","ok","Error","json","productsSlice","name","reducers","AddToCart","state","action","id","payload","sepeteEklenecekUrun","find","item","parseInt","undefined","quantity","push","fire","title","text","icon","showConfirmButton","timer","getProductById","urunDetay","updateCart","val","forEach","removeCart","sepetinOnSonHali","filter","clearCart","addToFavorites","urunFavori","removeToFav","favorilerinOnSonHali","clearFav","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["/Users/umuttolek/Desktop/RadoreProje/RadoreProject/ecommerce-app-2/src/app/slices/product.js"],"sourcesContent":["// src/app/slices/product.js\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst initialState = {\r\n    products: [],\r\n    carts: [],\r\n    favorites: [],\r\n    single: null,\r\n    status: 'idle',\r\n    error: null,\r\n};\r\n\r\n// Create an asynchronous thunk for fetching products\r\nexport const fetchProducts = createAsyncThunk(\r\n    'products/fetchProducts',\r\n    async () => {\r\n        const response = await fetch('http://localhost:5080/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    }\r\n);\r\n\r\nconst productsSlice = createSlice({\r\n    name: 'products',\r\n    initialState,\r\n    reducers: {\r\n        AddToCart: (state, action) => {\r\n            let { id } = action.payload;\r\n            let sepeteEklenecekUrun = state.carts.find(item => item.id === parseInt(id));\r\n            if (sepeteEklenecekUrun === undefined) {\r\n                let item = state.products.find(item => item.id === parseInt(id));\r\n                item.quantity = 1;\r\n                state.carts.push(item);\r\n                Swal.fire({\r\n                    title: 'Başarılı',\r\n                    text: \"Ürün sepete eklendi!\",\r\n                    icon: 'success',\r\n                    showConfirmButton: false,\r\n                    timer: 2000\r\n                });\r\n            }\r\n        },\r\n        getProductById: (state, action) => {\r\n            let { id } = action.payload;\r\n            let urunDetay = state.products.find(item => item.id === parseInt(id));\r\n            state.single = urunDetay;\r\n        },\r\n        updateCart: (state, action) => {\r\n            let { val, id } = action.payload;\r\n            state.carts.forEach(item => {\r\n                if (item.id === parseInt(id)) {\r\n                    item.quantity = val;\r\n                }\r\n            });\r\n        },\r\n        removeCart: (state, action) => {\r\n            let { id } = action.payload;\r\n            let sepetinOnSonHali = state.carts.filter(item => item.id !== parseInt(id));\r\n            state.carts = sepetinOnSonHali;\r\n        },\r\n        clearCart: (state) => {\r\n            state.carts = [];\r\n        },\r\n        addToFavorites: (state, action) => {\r\n            let { id } = action.payload;\r\n            let item = state.favorites.find(item => item.id === parseInt(id));\r\n            if (item === undefined) {\r\n                let urunFavori = state.products.find(item => item.id === parseInt(id));\r\n                urunFavori.quantity = 1;\r\n                state.favorites.push(urunFavori);\r\n                Swal.fire({\r\n                    title: 'Başarılı',\r\n                    text: 'İlgili ürün favorilere eklenmiştir',\r\n                    icon: 'success'\r\n                });\r\n            } else {\r\n                Swal.fire('Başarsız', 'İlgili ürün favorilere eklenemedi', 'warning');\r\n            }\r\n        },\r\n        removeToFav: (state, action) => {\r\n            let { id } = action.payload;\r\n            let favorilerinOnSonHali = state.favorites.filter(item => item.id !== parseInt(id));\r\n            state.favorites = favorilerinOnSonHali;\r\n        },\r\n        clearFav: (state) => {\r\n            state.favorites = [];\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchProducts.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchProducts.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.products = action.payload;\r\n            })\r\n            .addCase(fetchProducts.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            });\r\n    }\r\n});\r\n\r\nexport const { AddToCart, getProductById, updateCart, removeCart, clearCart, addToFavorites, removeToFav, clearFav } = productsSlice.actions;\r\n\r\nexport default productsSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}